#!/usr/bin/env python
from argparse import ArgumentParser
from ppdb_nba import ppdbNBA
from timeit import default_timer as timer
import os, logging, glob, shutil

logger = logging.getLogger('ppdb_nba')
logger.setLevel(logging.INFO)

def scan_jobs(pp, args):
    jobspath = pp.config.get('paths').get('jobs', os.getcwd() + "/jobs")
    locks = glob.glob(jobspath + '/.lock')
    if len(locks) > 0:
        logger.info('Lockfile found, ppdb_nba is still busy importing')
        return False

    jobs = glob.glob(jobspath + '/*.json')
    jobs.sort(key=os.path.getmtime)

    if len(jobs) > 0:
        job = jobs.pop()
        logger.info("STARTING: {job}".format(job=job))
        if pp.handle_job(job):
            logger.info("SUCCESS: {job} completed".format(job=job))
            shutil.move(
                os.path.join(pp.config.get('paths').get('jobs'),job),
                os.path.join(pp.config.get('paths').get('done'),job)
            )
        else:
            logger.error("{job} failed".format(job=job))
            shutil.move(
                os.path.join(pp.config.get('paths').get('jobs'),job),
                os.path.join(pp.config.get('paths').get('failed'),job)
            )
    else :
        logger.info('No jobs - nothing to do')
        return False

def import_incremental(pp, args):
    file = args.files[0]

    pp.set_source(args.source)
    if not args.force and not pp.lock_datafile(file):
        msg = "Lockfile gevonden. Import van '{file}' al bezig of uitgevoerd in een ander proces?".format(file=file)
        logger.fatal(msg)
        print('Toch importeren? Roep opnieuw aan met --force')
        exit(2)

    start = timer()
    logger.info("START incremental importing of {source}: {file}".format(source=args.source, file=file))
    try:
        pp.import_data(table=pp.source_config.get('table') + '_import', datafile=file)
    except Exception:
        exit(2)
    pp.remove_doubles()
    pp.handle_changes()
    logger.info("[{elapsed:.2f} seconds] END incremental importing of {source}: {file}".format(elapsed=(timer()-start), source=args.source, file=file))

def import_to_current(pp,args):
    logger.info("Fill current table '%s' with data" % (pp.source_config.get('table') + '_current'))
    pp.set_source(args.source)
    pp.import_data(pp.source_config.get('table') + '_current', args.files[0])

def import_deleted(pp,args):
    logger.info("Import deleted ids for source %s" % (pp.source_config.get('table')))
    pp.set_source(args.source)
    pp.import_deleted(args.files[0])

def main():
    parser = ArgumentParser(usage='ppdb_nba --source sourcename /path/file1'
                                           '\n\nPreprocessing data to create incremental updates')

    parser.add_argument('--source', action='store', help='Name of the data source')
    parser.add_argument('--config', action='store', help='Config file', default="config.yml")
    parser.add_argument('--current', action='store_true', help='Import data directly to current table (default is normal incremental import)')
    parser.add_argument('--delete', action='store_true', help='Handle permanent deletes (default is normal incremental import)')
    parser.add_argument('--force', action='store_true', help='Ignore lockfiles, to force the import')
    parser.add_argument('--debug', action='store_true', help='Set debugging level logging')
    parser.add_argument('files', help='One json data file', nargs='*', default=[])
    args = parser.parse_args()

    pp = ppdbNBA(config=args.config)

    if (args.debug):
        logger.setLevel(logging.DEBUG)

    if (not pp.config) :
        logger.fatal("Configuratie ontbreekt")
        exit(1)

    if (args.current):
        import_to_current(pp, args)
    elif (args.delete):
        import_deleted(pp, args)
    elif (len(args.files)>0):
        import_incremental(pp, args)
    else:
        scan_jobs(pp, args)

if __name__ == "__main__":
    main()